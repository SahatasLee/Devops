# Corrected and Improved Configuration

# Add basic settings if this isn't included from a main nginx.conf
# user nginx;
# worker_processes auto;
# pid /run/nginx.pid;
# error_log /var/log/nginx/error.log warn;

events {
    worker_connections 1024; # Adjust as needed
}

http {
    # include /etc/nginx/mime.types;
    # default_type application/octet-stream;
    # log_format main ...;
    # access_log /var/log/nginx/access.log main;
    # sendfile on;
    # tcp_nopush on;
    # keepalive_timeout 65;

    upstream kubernetes_api {
        # least_conn; # Optional: Consider for better load distribution
        server cat01:6443 max_fails=3 fail_timeout=30s;
        server cat02:6443 max_fails=3 fail_timeout=30s;
        server cat03:6443 max_fails=3 fail_timeout=30s;
        # keepalive 16; # Optional: Keep connections to backend open
    }

    server {
        # Listen on 6443 using HTTPS
        listen 6443 ssl;
        # listen [::]:6443 ssl http2; # Add if using IPv6

        # Replace with the actual DNS name clients will use to connect to Nginx
        # Or use the IP if accessed directly (though DNS is recommended)
        # server_name your_nginx_api_endpoint.example.com; # Or server_name _; if needed, but specific is better

        # --- Nginx Frontend SSL/TLS Configuration ---
        # YOU MUST PROVIDE THESE for the connection from client -> Nginx
        # ssl_certificate /etc/nginx/ssl/nginx-frontend.fullchain.pem;
        # ssl_certificate_key /etc/nginx/ssl/nginx-frontend.privkey.pem;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_prefer_server_ciphers on;
        # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        # Add other SSL options like session cache, HSTS if desired

        location / {
            # Proxy to backend using HTTPS
            proxy_pass https://kubernetes_api;

            # --- Backend TLS Verification (Nginx -> K8s API) ---
            # Enable verification (SECURITY!)
            proxy_ssl_verify on;
            # Path to the CA certificate that signed your K8s API server certs
            # YOU MUST PROVIDE THIS
            proxy_ssl_trusted_certificate /etc/nginx/certs/k8s-ca.crt;
            # Verify the server name matches the certificate CN/SAN
            # $proxy_host uses the name from the upstream server directive (e.g., cat01)
            # Or you can hardcode the expected internal name if needed.
            proxy_ssl_name $proxy_host;
            # Optional: Specify the SNI name if needed (usually derived from proxy_pass)
            # proxy_ssl_server_name on;

            # --- Set Headers ---
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Will be 'https' now

            # --- WebSocket Support ---
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # --- Timeouts ---
            proxy_connect_timeout 60s;
            proxy_send_timeout    60s;
            proxy_read_timeout    60s; # Adjust if needed for long watches
        }
    }
}